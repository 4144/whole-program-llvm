#!/usr/bin/env python
#
# This is the assembler phase.  This variant is only invoked during
# the second compilation where we are building bitcode.  The compiler
# has already been instructed to generate LLVM IR; the compiler then
# tries to assemble it into an object file.  The standard assembler
# doesn't understand LLVM bitcode, so we interpose and use the llvm-as
# command to build a bitcode file.  We leave the bitcode in place, but
# record its full absolute path in the corresponding object file
# (which was created in the first compilation phase by the real
# compiler).  We'll link this together at a later stage.

import os
import subprocess, sys
from utils import *
import tempfile


class BCFilter(ArgumentListFilter):
    def __init__(self, arglist):
        self.bcName = None
        localCallbacks = { '-o' : (1, BCFilter.outFileCallback) }
        super(BCFilter, self).__init__(arglist, exactMatches=localCallbacks)

    def outFileCallback(self, flag, name):
        self.outFileName = name

argFilter = BCFilter(sys.argv[1:])
# Since this is just the assembler, there should only ever be one file
[infile] = argFilter.inputFiles

# Now compile this llvm assembly file into a bitcode file.  The output
# filename is the same as the object with a .bc appended
(dirs, filename) = os.path.split(argFilter.outFileName)
bcfilename = '.{0}.bc'.format(filename)
bcPath = os.path.join(dirs, bcfilename)
fakeAssembler = ['llvm-as', infile, '-o', bcPath]
asmProc = subprocess.Popen(fakeAssembler)
realRet = asmProc.wait()

if realRet != 0:
    sys.exit(realRet)

# Now just build a temporary text file with the full path to the
# bitcode file that we'll write into the object file.
f = tempfile.NamedTemporaryFile(mode='rw+b', delete=False)
f.write(os.path.abspath(bcPath))
f.write('\n')
# Ensure buffers are flushed so that objcopy doesn't read an empty
# file
f.flush()
os.fsync(f.fileno())
f.close()

# Now write our .llvm_bc section
objcopyCmd = ['objcopy', '-v', '--add-section', '.llvm_bc={0}'.format(f.name)]
objcopyCmd.append(argFilter.outFileName)

orc = 0

try:
    if os.path.getsize(argFilter.outFileName) > 0:
        objProc = subprocess.Popen(objcopyCmd)
        orc = objProc.wait()
except:
    # configure loves to immediately delete things, causing issues for
    # us here.  Just ignore it
    os.remove(f.name)
    sys.exit(0)

os.remove(f.name)

if orc != 0:
    print('objcopy failed with {0}'.format(orc))
    sys.exit(-1)

sys.exit(realRet)




